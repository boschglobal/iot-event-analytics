FROM gcc:9 as base_stage
# TODO Check for smaller / more fitting linux image

ARG INTEGRATION_TEST_PATH
ARG HTTP_PROXY
ARG HTTPS_PROXY

ENV HTTP_PROXY=${HTTP_PROXY}
ENV HTTPS_PROXY=${HTTPS_PROXY}

# Install cmake
RUN apt-get -y update && \
    apt-get install -y --no-install-recommends \
    cmake

RUN gcc --version

FROM base_stage as build_stage
# Create app directory
RUN mkdir -p /app
WORKDIR /app

# Copy C++ SDK sources
COPY ../src/sdk/cpp ./src/sdk/cpp

# Copy C++ integration-Test sources
COPY ../${INTEGRATION_TEST_PATH} ./${INTEGRATION_TEST_PATH}

RUN ls ../
RUN ls /app
RUN ls /app/src/sdk/cpp
RUN ls /app/${INTEGRATION_TEST_PATH}

WORKDIR /app/${INTEGRATION_TEST_PATH}

# Compile/Build with cmake tools
RUN cmake -B build -S .
RUN cmake --build build --parallel

RUN ls /app/${INTEGRATION_TEST_PATH}/build



#FROM alpine:3.13 as runtime_stage
#FROM gcc:9 as runtime_stage
FROM build_stage as runtime_stage

ARG INTEGRATION_TEST_PATH

RUN ls 

WORKDIR /app/${INTEGRATION_TEST_PATH}/build

# Copy in cpp SDK source - if using a seperate runtime-layer
# COPY --from=build_stage /app/src/sdk/cpp/ ./

# Copy in integration-test build artifacts - if using a seperate runtime-layer
# COPY --from=build_stage /app/${INTEGRATION_TEST_PATH}/build ./

#RUN ./function_provider_for_test

RUN ls /app/${INTEGRATION_TEST_PATH}/build


CMD ./function_provider_for_test

# Copy run script for echo example.
#COPY ../docker/integration-tests/cpp/setup_tests.sh .

# Run echo example via run script
#RUN chmod +x setup_tests.sh

#CMD ./setup_tests.sh
